{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport { ref } from 'vue';\nimport axios from 'axios';\n\n// export default {\n\n//   name: 'TimeChart',\n//   setup() {\n//     const time= ref([]);\n//     const ping = ref([]);\n\n//     // const getData = async () => {\n//     //     const res = await axios.get(`/get/chartData`);\n//     //     const data = res.data;\n//     //     console.log(\"data:\"+data.ping);\n//     // };\n\n//     const chartCanvas = ref(null);\n\n//     const getData = async () => {\n//           await axios\n//           .get(\"/get/chartData\")\n//           .then((result) => {\n//             result.data.forEach((item) => {\n//                   //console.log(item.time);\n//                   time.value = item.time;\n//                   console.log(item.ping);\n//                   ping.value = item.ping;\n//               });\n\n//               const ctx = chartCanvas.value;\n\n//               new Chart(ctx, {\n//                 type: 'line',\n//                 data: {\n//                   labels: time.value,\n//                   datasets: [{\n//                     label: 'Data',\n//                     data: ping.value,\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     borderWidth: 1,\n//                     fill: false\n//                   }]\n//                 },\n//                 options: {\n//                   scales: {\n//                     x: {\n//                       type: 'time',\n//                       time: {\n//                         unit: 'day'\n//                       }\n//                     }\n//                   }\n//                 }\n//               });\n\n//           });\n//       };\n\n//       getData();\n\n//     // onMounted(() => {\n\n//     //   const ctx = chartCanvas.value.getContext('2d');\n\n//     //   new Chart(ctx, {\n//     //     type: 'line',\n//     //     data: {\n//     //       labels: time.value,\n//     //       datasets: [{\n//     //         label: 'Data',\n//     //         data: ping.value,\n//     //         borderColor: 'rgb(75, 192, 192)',\n//     //         borderWidth: 1,\n//     //         fill: false\n//     //       }]\n//     //     },\n//     //     options: {\n//     //       scales: {\n//     //         x: {\n//     //           type: 'time',\n//     //           time: {\n//     //             unit: 'day'\n//     //           }\n//     //         }\n//     //       }\n//     //     }\n//     //   });\n//     // });\n\n//     return { chartCanvas, getData };\n//   }\n// };\n\nexport default {\n  name: 'TimeChart',\n  setup() {\n    const time = ref([]);\n    const ping = ref([]);\n    const chartCanvas = ref();\n    const getData = async () => {\n      try {\n        const response = await axios.get(\"/get/chartData\");\n        time.value = response.data.map(item => item.time);\n        ping.value = response.data.map(item => item.ping);\n        drawChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    const drawChart = () => {\n      const ctx = chartCanvas.value.getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: time.value,\n          datasets: [{\n            label: 'Data',\n            data: ping.value,\n            borderColor: 'rgb(75, 192, 192)',\n            borderWidth: 1,\n            fill: false\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'day'\n              }\n            }\n          }\n        }\n      });\n    };\n    onMounted(getData);\n    return {\n      chartCanvas\n    };\n  }\n};","map":{"version":3,"names":["Chart","ref","axios","name","setup","time","ping","chartCanvas","getData","response","get","value","data","map","item","drawChart","error","console","ctx","getContext","type","labels","datasets","label","borderColor","borderWidth","fill","options","scales","x","unit","onMounted"],"sources":["C:\\test\\test\\test\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas ref=\"chartCanvas\"></canvas>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport { ref } from 'vue';\nimport axios from 'axios';\n\n// export default {\n\n//   name: 'TimeChart',\n//   setup() {\n//     const time= ref([]);\n//     const ping = ref([]);\n\n//     // const getData = async () => {\n//     //     const res = await axios.get(`/get/chartData`);\n//     //     const data = res.data;\n//     //     console.log(\"data:\"+data.ping);\n//     // };\n\n\n    \n//     const chartCanvas = ref(null);\n\n\n    \n//     const getData = async () => {\n//           await axios\n//           .get(\"/get/chartData\")\n//           .then((result) => {\n//             result.data.forEach((item) => {\n//                   //console.log(item.time);\n//                   time.value = item.time;\n//                   console.log(item.ping);\n//                   ping.value = item.ping;\n//               });\n\n                \n//               const ctx = chartCanvas.value;\n\n//               new Chart(ctx, {\n//                 type: 'line',\n//                 data: {\n//                   labels: time.value,\n//                   datasets: [{\n//                     label: 'Data',\n//                     data: ping.value,\n//                     borderColor: 'rgb(75, 192, 192)',\n//                     borderWidth: 1,\n//                     fill: false\n//                   }]\n//                 },\n//                 options: {\n//                   scales: {\n//                     x: {\n//                       type: 'time',\n//                       time: {\n//                         unit: 'day'\n//                       }\n//                     }\n//                   }\n//                 }\n//               });\n\n\n\n//           });\n//       };\n\n      \n//       getData();\n\n\n//     // onMounted(() => {\n\n//     //   const ctx = chartCanvas.value.getContext('2d');\n\n//     //   new Chart(ctx, {\n//     //     type: 'line',\n//     //     data: {\n//     //       labels: time.value,\n//     //       datasets: [{\n//     //         label: 'Data',\n//     //         data: ping.value,\n//     //         borderColor: 'rgb(75, 192, 192)',\n//     //         borderWidth: 1,\n//     //         fill: false\n//     //       }]\n//     //     },\n//     //     options: {\n//     //       scales: {\n//     //         x: {\n//     //           type: 'time',\n//     //           time: {\n//     //             unit: 'day'\n//     //           }\n//     //         }\n//     //       }\n//     //     }\n//     //   });\n//     // });\n\n//     return { chartCanvas, getData };\n//   }\n// };\n\n\nexport default {\n\nname: 'TimeChart',\nsetup() {\n  const time = ref([]);\n  const ping = ref([]);\n  const chartCanvas = ref();\n\n  const getData = async () => {\n    try {\n      const response = await axios.get(\"/get/chartData\");\n      time.value = response.data.map(item => item.time);\n      ping.value = response.data.map(item => item.ping);\n      drawChart();\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const drawChart = () => {\n    const ctx = chartCanvas.value.getContext('2d');\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: time.value,\n        datasets: [{\n          label: 'Data',\n          data: ping.value,\n          borderColor: 'rgb(75, 192, 192)',\n          borderWidth: 1,\n          fill: false\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            }\n          }\n        }\n      }\n    });\n  };\n\n  onMounted(getData);\n\n  return { chartCanvas };\n}\n};\n</script>\n\n<style scoped>\n/* Add your chart styles here */\n</style>\n"],"mappings":"AAOA,OAAOA,KAAI,MAAO,eAAe;AACjC,OAAO,0BAA0B;AACjC,SAASC,GAAE,QAAS,KAAK;AACzB,OAAOC,KAAI,MAAO,OAAO;;AAEzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAGA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA,eAAe;EAEfC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIJ,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMK,IAAG,GAAIL,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMM,WAAU,GAAIN,GAAG,CAAC,CAAC;IAEzB,MAAMO,OAAM,GAAI,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,gBAAgB,CAAC;QAClDL,IAAI,CAACM,KAAI,GAAIF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACT,IAAI,CAAC;QACjDC,IAAI,CAACK,KAAI,GAAIF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACR,IAAI,CAAC;QACjDS,SAAS,CAAC,CAAC;MACb,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAMD,SAAQ,GAAIA,CAAA,KAAM;MACtB,MAAMG,GAAE,GAAIX,WAAW,CAACI,KAAK,CAACQ,UAAU,CAAC,IAAI,CAAC;MAC9C,IAAInB,KAAK,CAACkB,GAAG,EAAE;QACbE,IAAI,EAAE,MAAM;QACZR,IAAI,EAAE;UACJS,MAAM,EAAEhB,IAAI,CAACM,KAAK;UAClBW,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,MAAM;YACbX,IAAI,EAAEN,IAAI,CAACK,KAAK;YAChBa,WAAW,EAAE,mBAAmB;YAChCC,WAAW,EAAE,CAAC;YACdC,IAAI,EAAE;UACR,CAAC;QACH,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDT,IAAI,EAAE,MAAM;cACZf,IAAI,EAAE;gBACJyB,IAAI,EAAE;cACR;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAEDC,SAAS,CAACvB,OAAO,CAAC;IAElB,OAAO;MAAED;IAAY,CAAC;EACxB;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}