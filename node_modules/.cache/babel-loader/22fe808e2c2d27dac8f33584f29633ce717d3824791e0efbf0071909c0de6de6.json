{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport 'chartjs-adapter-date-fns';\nimport { ref, onMounted, nextTick, reactive, onBeforeUnmount } from 'vue';\nimport axios from 'axios';\nimport { drawChart } from '../../common/common.js';\nimport moment from 'moment';\nexport default {\n  name: 'TimeChart',\n  setup() {\n    /*  const date = new Date();\r\n       const startDate = ref(new Date(date.getFullYear(), date.getMonth(), 1));\r\n       const endDate = ref(new Date());\r\n       const isLoading = ref(false);\r\n       const chartCanvasRefs = ref([]);\r\n       const charts = ref([]);\r\n       //const { list } = useScrollLoad(scrollContainer, url);\r\n    \n    \n         const handleDateChange = (event, dateRef) => {\r\n         const dateString = event.target.value;\r\n         if (!dateString) return;\r\n    \n         const [year, month, day] = dateString.split('-').map(Number);\r\n         dateRef.value = new Date(year, month - 1, day);\r\n       };\r\n    \n       const handleStartDateChange = event => handleDateChange(event, startDate);\r\n       const handleEndDateChange = event => handleDateChange(event, endDate);\r\n    \n       const getData = async () => {\r\n         const formattedStartDate = moment(startDate.value).format('YYYY-MM-DD');\r\n         const formattedEndDate = moment(endDate.value).format('YYYY-MM-DD');\r\n    \n         if (formattedStartDate > formattedEndDate) {\r\n           alert(\"시작날짜는 끝날짜보다 작아야 합니다.\");\r\n           return;\r\n         }\r\n    \n         isLoading.value = true;\r\n    \n         try {\r\n           const response = await axios.get('/get/chartData', {\r\n             params: {\r\n               startDate: formattedStartDate,\r\n               endDate: formattedEndDate,\r\n             },\r\n           });\r\n    \n           const data = response.data;\r\n           const time = data.map(item => new Date(item.time).getTime());\r\n           const ping = data.map(item => item.ping);\r\n           const serverName = data.map(item => item.serverName);\r\n    \n           charts.value = Array.from({ length: 3 }, () => ({\r\n             time: [...time],\r\n             ping: [...ping],\r\n             serverName: serverName[0], // Assuming all server names are the same for simplification\r\n           }));\r\n    \n           await nextTick();\r\n           await drawChartsInGroups(5);\r\n         } catch (error) {\r\n           console.error('Error fetching data:', error);\r\n         } finally {\r\n           isLoading.value = false;\r\n         }\r\n       };\r\n    \n       const drawChartAsync = (context, time, ping) => {\r\n         return new Promise(resolve => {\r\n           requestAnimationFrame(() => {\r\n             drawChart(context, time, ping);\r\n             resolve();\r\n           });\r\n         });\r\n       };\r\n    \n       const drawChartsInGroups = async groupSize => {\r\n         for (let i = 0; i < charts.value.length; i += groupSize) {\r\n           const groupPromises = [];\r\n           for (let j = 0; j < groupSize && (i + j) < charts.value.length; j++) {\r\n             const index = i + j;\r\n             const chart = charts.value[index];\r\n             const canvas = chartCanvasRefs.value[index];\r\n             if (canvas) {\r\n               const context = canvas.getContext('2d');\r\n               groupPromises.push(drawChartAsync(context, chart.time, chart.ping));\r\n             }\r\n           }\r\n           await Promise.all(groupPromises);\r\n           await new Promise(resolve => setTimeout(resolve, 100));\r\n         }\r\n       };\r\n    \n       const handleVisibilityChange = async () => {\r\n         let scrollBottom = document.documentElement.scrollTop + window.innerHeight;\r\n         if (scrollBottom >= 1600) {\r\n           await nextTick();\r\n           await drawChartsInGroups(3);\r\n          console.log(scrollBottom);\r\n         }\r\n       };\r\n    \n       onMounted(() => {\r\n         getData();\r\n        document.addEventListener('scroll', handleVisibilityChange, true);\r\n       \r\n      //console.log(scrollBottom);\r\n    \n       });\r\n    \n       // onBeforeUnmount(() => {\r\n       //   document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n       // });\r\n    \n           \r\n    \n    \n    \n    \n    \n    \n    \n       return {\r\n         startDate,\r\n         endDate,\r\n         handleStartDateChange,\r\n         handleEndDateChange,\r\n         getData,\r\n         isLoading,\r\n         chartCanvasRefs,\r\n         charts,\r\n       };\r\n    */\n    const date = new Date();\n    const state = reactive({\n      startDate: new Date(date.getFullYear(), date.getMonth(), 1),\n      endDate: new Date(),\n      isLoading: false,\n      charts: [],\n      visibleCharts: [],\n      currentIndex: 0\n    });\n    const chartCanvasRefs = ref([]);\n    const groupSize = 5;\n    const handleDateChange = (event, dateRef) => {\n      const dateString = event.target.value;\n      if (!dateString) return;\n      const [year, month, day] = dateString.split('-').map(Number);\n      dateRef.value = new Date(year, month - 1, day);\n    };\n    const handleStartDateChange = event => handleDateChange(event, state.startDate);\n    const handleEndDateChange = event => handleDateChange(event, state.endDate);\n    const getData = async () => {\n      const formattedStartDate = moment(state.startDate).format('YYYY-MM-DD');\n      const formattedEndDate = moment(state.endDate).format('YYYY-MM-DD');\n      if (formattedStartDate > formattedEndDate) {\n        alert(\"시작날짜는 끝날짜보다 작아야 합니다.\");\n        return;\n      }\n      state.isLoading = true;\n      try {\n        const response = await axios.get('/get/chartData', {\n          params: {\n            startDate: formattedStartDate,\n            endDate: formattedEndDate\n          }\n        });\n        const data = response.data;\n        const time = data.map(item => new Date(item.time).getTime());\n        const ping = data.map(item => item.ping);\n        const serverName = data.map(item => item.serverName);\n        state.charts = Array.from({\n          length: 20\n        }, () => ({\n          time: [...time],\n          ping: [...ping],\n          serverName: serverName[0] // Simplification\n        }));\n        state.currentIndex = 0;\n        state.visibleCharts = [];\n        loadMoreCharts();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        state.isLoading = false;\n      }\n    };\n    const loadMoreCharts = async () => {\n      const endIndex = state.currentIndex + groupSize;\n      const newCharts = state.charts.slice(state.currentIndex, endIndex);\n      state.visibleCharts.push(...newCharts);\n      await nextTick();\n      await drawChartsInGroups(newCharts);\n      state.currentIndex = endIndex;\n    };\n    const drawChartAsync = (context, time, ping) => {\n      return new Promise(resolve => {\n        requestAnimationFrame(() => {\n          drawChart(context, time, ping);\n          resolve();\n        });\n      });\n    };\n    const drawChartsInGroups = async chartsToDraw => {\n      const groupPromises = chartsToDraw.map((chart, index) => {\n        const canvas = chartCanvasRefs.value[state.currentIndex - groupSize + index];\n        if (canvas) {\n          const context = canvas.getContext('2d');\n          return drawChartAsync(context, chart.time, chart.ping);\n        }\n      });\n      await Promise.all(groupPromises);\n    };\n    const handleScroll = async () => {\n      const bottomReached = window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100;\n      if (bottomReached && state.currentIndex < state.charts.length) {\n        await loadMoreCharts();\n      }\n    };\n    onMounted(() => {\n      getData();\n      window.addEventListener('scroll', handleScroll);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('scroll', handleScroll);\n    });\n    return {\n      ...state,\n      chartCanvasRefs,\n      handleStartDateChange,\n      handleEndDateChange,\n      getData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","reactive","onBeforeUnmount","axios","drawChart","moment","name","setup","date","Date","state","startDate","getFullYear","getMonth","endDate","isLoading","charts","visibleCharts","currentIndex","chartCanvasRefs","groupSize","handleDateChange","event","dateRef","dateString","target","value","year","month","day","split","map","Number","handleStartDateChange","handleEndDateChange","getData","formattedStartDate","format","formattedEndDate","alert","response","get","params","data","time","item","getTime","ping","serverName","Array","from","length","loadMoreCharts","error","console","endIndex","newCharts","slice","push","drawChartsInGroups","drawChartAsync","context","Promise","resolve","requestAnimationFrame","chartsToDraw","groupPromises","chart","index","canvas","getContext","all","handleScroll","bottomReached","window","innerHeight","scrollY","document","documentElement","scrollHeight","addEventListener","removeEventListener"],"sources":["C:\\test\\test\\test\\src\\components\\Chart\\Chart.vue"],"sourcesContent":["<template>\r\n  <div class=\"center\">\r\n    <img alt=\"Vue logo\" src=\"@/assets/metanet.png\" style=\"width: 200px;\">\r\n  </div>\r\n     <div style=\"display: flex; justify-content: center;\">\r\n      <div style=\"margin: 10px;\"><Datepicker \r\n          v-model=\"startDate\"\r\n          @focus=\"handleStartDateChange\"\r\n          />       \r\n      </div>\r\n      <span style=\"margin: 10px;\">~</span>\r\n      <div style=\"margin: 10px;\"><Datepicker      \r\n          v-model=\"endDate\"     \r\n          @focus=\"handleEndDateChange\"   \r\n          />\r\n      </div>\r\n     <div>\r\n\r\n      \r\n     \r\n    </div>\r\n       <button @click=\"getData\" class=\"btn btn-info btn-sm\">조회</button>\r\n    </div>\r\n\r\n  <div class=\"spinner-div\" v-if=\"isLoading\">\r\n      <q-spinner-tail\r\n      color=\"primary\"\r\n      size=\"5em\"\r\n      />\r\n  </div>\r\n\r\n \r\n\r\n  <br>\r\n  <!-- <div>   \r\n    <canvas ref=\"chartCanvas\" id=\"canvas\">    \r\n    </canvas>\r\n  </div> -->\r\n  <div v-for=\"(chart, index) in charts\" :key=\"index\" style=\"height: 400px; margin-bottom:100px; margin-left: 20px; margin-right: 20px;\">\r\n    <label style=\"margin-top: 35px; margin-bottom: 10px;\"><b>서버 이름 {{  }}</b></label>\r\n    <canvas :ref=\"el => chartCanvasRefs[index] = el\" :id=\"'canvas' + index\"></canvas>\r\n  </div>\r\n\r\n\r\n  </template>\r\n  \r\n  <script>\r\n  import 'chartjs-adapter-date-fns';\r\n  import { ref, onMounted,  nextTick,reactive, onBeforeUnmount   } from 'vue';\r\n  import axios from 'axios';\r\n  import { drawChart } from '../../common/common.js'; \r\n  import moment from 'moment';\r\n\r\n\r\n  \r\n  export default {\r\n  \r\n  name: 'TimeChart',\r\n  setup() {\r\n /*  const date = new Date();\r\n    const startDate = ref(new Date(date.getFullYear(), date.getMonth(), 1));\r\n    const endDate = ref(new Date());\r\n    const isLoading = ref(false);\r\n    const chartCanvasRefs = ref([]);\r\n    const charts = ref([]);\r\n    //const { list } = useScrollLoad(scrollContainer, url);\r\n\r\n\r\n      const handleDateChange = (event, dateRef) => {\r\n      const dateString = event.target.value;\r\n      if (!dateString) return;\r\n\r\n      const [year, month, day] = dateString.split('-').map(Number);\r\n      dateRef.value = new Date(year, month - 1, day);\r\n    };\r\n\r\n    const handleStartDateChange = event => handleDateChange(event, startDate);\r\n    const handleEndDateChange = event => handleDateChange(event, endDate);\r\n\r\n    const getData = async () => {\r\n      const formattedStartDate = moment(startDate.value).format('YYYY-MM-DD');\r\n      const formattedEndDate = moment(endDate.value).format('YYYY-MM-DD');\r\n\r\n      if (formattedStartDate > formattedEndDate) {\r\n        alert(\"시작날짜는 끝날짜보다 작아야 합니다.\");\r\n        return;\r\n      }\r\n\r\n      isLoading.value = true;\r\n\r\n      try {\r\n        const response = await axios.get('/get/chartData', {\r\n          params: {\r\n            startDate: formattedStartDate,\r\n            endDate: formattedEndDate,\r\n          },\r\n        });\r\n\r\n        const data = response.data;\r\n        const time = data.map(item => new Date(item.time).getTime());\r\n        const ping = data.map(item => item.ping);\r\n        const serverName = data.map(item => item.serverName);\r\n\r\n        charts.value = Array.from({ length: 3 }, () => ({\r\n          time: [...time],\r\n          ping: [...ping],\r\n          serverName: serverName[0], // Assuming all server names are the same for simplification\r\n        }));\r\n\r\n        await nextTick();\r\n        await drawChartsInGroups(5);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    };\r\n\r\n    const drawChartAsync = (context, time, ping) => {\r\n      return new Promise(resolve => {\r\n        requestAnimationFrame(() => {\r\n          drawChart(context, time, ping);\r\n          resolve();\r\n        });\r\n      });\r\n    };\r\n\r\n    const drawChartsInGroups = async groupSize => {\r\n      for (let i = 0; i < charts.value.length; i += groupSize) {\r\n        const groupPromises = [];\r\n        for (let j = 0; j < groupSize && (i + j) < charts.value.length; j++) {\r\n          const index = i + j;\r\n          const chart = charts.value[index];\r\n          const canvas = chartCanvasRefs.value[index];\r\n          if (canvas) {\r\n            const context = canvas.getContext('2d');\r\n            groupPromises.push(drawChartAsync(context, chart.time, chart.ping));\r\n          }\r\n        }\r\n        await Promise.all(groupPromises);\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n      }\r\n    };\r\n\r\n    const handleVisibilityChange = async () => {\r\n      let scrollBottom = document.documentElement.scrollTop + window.innerHeight;\r\n      if (scrollBottom >= 1600) {\r\n        await nextTick();\r\n        await drawChartsInGroups(3);\r\n       console.log(scrollBottom);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getData();\r\n     document.addEventListener('scroll', handleVisibilityChange, true);\r\n    \r\n   //console.log(scrollBottom);\r\n\r\n    });\r\n\r\n    // onBeforeUnmount(() => {\r\n    //   document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    // });\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return {\r\n      startDate,\r\n      endDate,\r\n      handleStartDateChange,\r\n      handleEndDateChange,\r\n      getData,\r\n      isLoading,\r\n      chartCanvasRefs,\r\n      charts,\r\n    };\r\n*/\r\nconst date = new Date();\r\n    const state = reactive({\r\n      startDate: new Date(date.getFullYear(), date.getMonth(), 1),\r\n      endDate: new Date(),\r\n      isLoading: false,\r\n      charts: [],\r\n      visibleCharts: [],\r\n      currentIndex: 0,\r\n    });\r\n    const chartCanvasRefs = ref([]);\r\n    const groupSize = 5;\r\n\r\n    const handleDateChange = (event, dateRef) => {\r\n      const dateString = event.target.value;\r\n      if (!dateString) return;\r\n\r\n      const [year, month, day] = dateString.split('-').map(Number);\r\n      dateRef.value = new Date(year, month - 1, day);\r\n    };\r\n\r\n    const handleStartDateChange = event => handleDateChange(event, state.startDate);\r\n    const handleEndDateChange = event => handleDateChange(event, state.endDate);\r\n\r\n    const getData = async () => {\r\n      const formattedStartDate = moment(state.startDate).format('YYYY-MM-DD');\r\n      const formattedEndDate = moment(state.endDate).format('YYYY-MM-DD');\r\n\r\n      if (formattedStartDate > formattedEndDate) {\r\n        alert(\"시작날짜는 끝날짜보다 작아야 합니다.\");\r\n        return;\r\n      }\r\n\r\n      state.isLoading = true;\r\n\r\n      try {\r\n        const response = await axios.get('/get/chartData', {\r\n          params: {\r\n            startDate: formattedStartDate,\r\n            endDate: formattedEndDate,\r\n          },\r\n        });\r\n\r\n        const data = response.data;\r\n        const time = data.map(item => new Date(item.time).getTime());\r\n        const ping = data.map(item => item.ping);\r\n        const serverName = data.map(item => item.serverName);\r\n\r\n        state.charts = Array.from({ length: 20 }, () => ({\r\n          time: [...time],\r\n          ping: [...ping],\r\n          serverName: serverName[0], // Simplification\r\n        }));\r\n\r\n        state.currentIndex = 0;\r\n        state.visibleCharts = [];\r\n        loadMoreCharts();\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        state.isLoading = false;\r\n      }\r\n    };\r\n\r\n    const loadMoreCharts = async () => {\r\n      const endIndex = state.currentIndex + groupSize;\r\n      const newCharts = state.charts.slice(state.currentIndex, endIndex);\r\n      state.visibleCharts.push(...newCharts);\r\n\r\n      await nextTick();\r\n      await drawChartsInGroups(newCharts);\r\n      state.currentIndex = endIndex;\r\n    };\r\n\r\n    const drawChartAsync = (context, time, ping) => {\r\n      return new Promise(resolve => {\r\n        requestAnimationFrame(() => {\r\n          drawChart(context, time, ping);\r\n          resolve();\r\n        });\r\n      });\r\n    };\r\n\r\n    const drawChartsInGroups = async (chartsToDraw) => {\r\n      const groupPromises = chartsToDraw.map((chart, index) => {\r\n        const canvas = chartCanvasRefs.value[state.currentIndex - groupSize + index];\r\n        if (canvas) {\r\n          const context = canvas.getContext('2d');\r\n          return drawChartAsync(context, chart.time, chart.ping);\r\n        }\r\n      });\r\n      await Promise.all(groupPromises);\r\n    };\r\n\r\n    const handleScroll = async () => {\r\n      const bottomReached = window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100;\r\n      if (bottomReached && state.currentIndex < state.charts.length) {\r\n        await loadMoreCharts();\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getData();\r\n      window.addEventListener('scroll', handleScroll);\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    });\r\n\r\n    return {\r\n      ...state,\r\n      chartCanvasRefs,\r\n      handleStartDateChange,\r\n      handleEndDateChange,\r\n      getData,\r\n    };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #canvas {\r\n    width: 800px; \r\n    height: 400px;\r\n  }\r\n\r\n\r\n  .spinner-div {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(255, 255, 255, 0.8); \r\n  z-index: 9999; \r\n}\r\n\r\n\r\nbutton {\r\n  height: 35px; \r\n  margin-top: 5px; \r\n  width: 50px; \r\n  margin-left: 10px; \r\n  color: white;\r\n\r\n}\r\n\r\n\r\n.center {\r\n            text-align: center; /* 가로 가운데 정렬 */\r\n        }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}