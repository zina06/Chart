{"ast":null,"code":"import Chart from 'chart.js/auto';\n\n// export const drawChart = (ctx, time, ping) => {\n//   if (Chart.getChart(ctx)) {\n//     Chart.getChart(ctx)?.destroy();\n//   }\n\n//    console.log(\"drawChart\");\n\n//     new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//         labels: time,\n//         datasets: [{\n//           label: 'ping',\n//           data: ping,\n//           borderColor: 'rgb(75, 192, 192)',\n//           backgroundColor: 'rgb(75, 192, 192)',\n//           borderWidth: 1,\n//           fill: false,\n//           pointRadius : 0\n//         }]\n//       },\n//       options: {    \n//         plugins: {\n//             legend: {\n//                 position: 'bottom', // 범례 위치\n//                 align: 'start' // 범례 수직 정렬\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//         scales: {\n//           x: {\n//             type: 'time',\n//             time: {\n//               unit: 'day',\n//               displayFormats: {\n//                 day: 'MM/dd'\n//               }\n//             }\n//           },\n//           y: {\n//             min: 0,\n//             max: 60000\n//           }\n//         }\n//       }\n//     });\n//   };\n\nconst drawChartAsync = (ctx, chartData) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartData.time,\n          datasets: [{\n            label: 'ping',\n            data: chartData.ping,\n            borderColor: 'rgb(75, 192, 192)',\n            backgroundColor: 'rgb(75, 192, 192)',\n            borderWidth: 1,\n            fill: false,\n            pointRadius: 0\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              position: 'bottom',\n              // 범례 위치\n              align: 'start' // 범례 수직 정렬\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'day',\n                displayFormats: {\n                  day: 'MM/dd'\n                }\n              }\n            },\n            y: {\n              min: 0,\n              max: 60000\n            }\n          }\n        },\n        plugins: {\n          afterDraw: resolve\n        }\n      });\n    }, 0);\n  });\n};","map":{"version":3,"names":["Chart","drawChartAsync","ctx","chartData","Promise","resolve","setTimeout","type","data","labels","time","datasets","label","ping","borderColor","backgroundColor","borderWidth","fill","pointRadius","options","plugins","legend","position","align","responsive","maintainAspectRatio","scales","x","unit","displayFormats","day","y","min","max","afterDraw"],"sources":["C:/test/test/test/src/common/common.js"],"sourcesContent":["import Chart from 'chart.js/auto';\r\n\r\n\r\n// export const drawChart = (ctx, time, ping) => {\r\n//   if (Chart.getChart(ctx)) {\r\n//     Chart.getChart(ctx)?.destroy();\r\n//   }\r\n    \r\n//    console.log(\"drawChart\");\r\n   \r\n//     new Chart(ctx, {\r\n//       type: 'line',\r\n//       data: {\r\n//         labels: time,\r\n//         datasets: [{\r\n//           label: 'ping',\r\n//           data: ping,\r\n//           borderColor: 'rgb(75, 192, 192)',\r\n//           backgroundColor: 'rgb(75, 192, 192)',\r\n//           borderWidth: 1,\r\n//           fill: false,\r\n//           pointRadius : 0\r\n//         }]\r\n//       },\r\n//       options: {    \r\n//         plugins: {\r\n//             legend: {\r\n//                 position: 'bottom', // 범례 위치\r\n//                 align: 'start' // 범례 수직 정렬\r\n//             }\r\n//         },\r\n//         responsive: true,\r\n//         maintainAspectRatio: false,\r\n//         scales: {\r\n//           x: {\r\n//             type: 'time',\r\n//             time: {\r\n//               unit: 'day',\r\n//               displayFormats: {\r\n//                 day: 'MM/dd'\r\n//               }\r\n//             }\r\n//           },\r\n//           y: {\r\n//             min: 0,\r\n//             max: 60000\r\n//           }\r\n//         }\r\n//       }\r\n//     });\r\n//   };\r\n\r\n\r\nconst drawChartAsync = (ctx, chartData) => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: chartData.time,\r\n          datasets: [{\r\n            label: 'ping',\r\n            data: chartData.ping,\r\n            borderColor: 'rgb(75, 192, 192)',\r\n            backgroundColor: 'rgb(75, 192, 192)',\r\n            borderWidth: 1,\r\n            fill: false,\r\n            pointRadius : 0\r\n          }]\r\n        },\r\n        options: {    \r\n          plugins: {\r\n              legend: {\r\n                  position: 'bottom', // 범례 위치\r\n                  align: 'start' // 범례 수직 정렬\r\n              }\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            x: {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'day',\r\n                displayFormats: {\r\n                  day: 'MM/dd'\r\n                }\r\n              }\r\n            },\r\n            y: {\r\n              min: 0,\r\n              max: 60000\r\n            }\r\n          }\r\n        },\r\n        plugins: {\r\n          afterDraw: resolve\r\n        }\r\n      });\r\n    }, 0);\r\n  });\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe;;AAGjC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,SAAS,KAAK;EACzC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC5BC,UAAU,CAAC,MAAM;MACf,IAAIN,KAAK,CAACE,GAAG,EAAE;QACbK,IAAI,EAAE,MAAM;QACZC,IAAI,EAAE;UACJC,MAAM,EAAEN,SAAS,CAACO,IAAI;UACtBC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,MAAM;YACbJ,IAAI,EAAEL,SAAS,CAACU,IAAI;YACpBC,WAAW,EAAE,mBAAmB;YAChCC,eAAe,EAAE,mBAAmB;YACpCC,WAAW,EAAE,CAAC;YACdC,IAAI,EAAE,KAAK;YACXC,WAAW,EAAG;UAChB,CAAC;QACH,CAAC;QACDC,OAAO,EAAE;UACPC,OAAO,EAAE;YACLC,MAAM,EAAE;cACJC,QAAQ,EAAE,QAAQ;cAAE;cACpBC,KAAK,EAAE,OAAO,CAAC;YACnB;UACJ,CAAC;UACDC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDpB,IAAI,EAAE,MAAM;cACZG,IAAI,EAAE;gBACJkB,IAAI,EAAE,KAAK;gBACXC,cAAc,EAAE;kBACdC,GAAG,EAAE;gBACP;cACF;YACF,CAAC;YACDC,CAAC,EAAE;cACDC,GAAG,EAAE,CAAC;cACNC,GAAG,EAAE;YACP;UACF;QACF,CAAC;QACDb,OAAO,EAAE;UACPc,SAAS,EAAE7B;QACb;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}