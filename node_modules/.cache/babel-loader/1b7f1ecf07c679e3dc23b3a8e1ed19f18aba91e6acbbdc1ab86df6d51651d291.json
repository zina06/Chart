{"ast":null,"code":"//import Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { drawChart } from '../common/common.js';\nexport default {\n  name: 'TimeChart',\n  setup() {\n    const time = ref([]);\n    const ping = ref([]);\n    const chartCanvas = ref();\n    const getData = async () => {\n      try {\n        const response = await axios.get(\"/get/chartData\");\n        time.value = response.data.map(item => new Date(item.time).getTime());\n        ping.value = response.data.map(item => item.ping);\n        console.log(response);\n        //  console.log(typeof time.value[0]);\n        drawChart(chartCanvas.value.getContext('2d'), time.value, ping.value);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    // const drawChart = () => {\n    //   const ctx = chartCanvas.value.getContext('2d');\n    //   new Chart(ctx, {\n    //     type: 'line',\n    //     data: {\n    //       labels: time.value,\n    //       datasets: [{\n    //         label: 'ping',\n    //         data: ping.value,\n    //         borderColor: 'rgb(75, 192, 192)',\n    //         borderWidth: 1,\n    //         fill: false,\n    //         pointRadius : 0\n    //       }]\n    //     },\n    //     options: {    \n    //       scales: {\n    //         x: {\n    //           type: 'time',\n    //           time: {\n    //             unit: 'day',\n    //             displayFormats: {\n    //               day: 'MM/dd'\n    //             }\n    //           }\n    //         },\n    //         y: {\n    //           min: 0,\n    //           max: 60000\n    //         }\n    //       }\n    //     }\n    //   });\n    // };\n\n    onMounted(getData);\n    return {\n      chartCanvas\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","drawChart","name","setup","time","ping","chartCanvas","getData","response","get","value","data","map","item","Date","getTime","console","log","getContext","error"],"sources":["C:\\test\\test\\test\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas ref=\"chartCanvas\" style=\"width: 100%; height: 400px;\"></canvas>\n  </div>\n</template>\n\n<script>\n//import Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { drawChart } from '../common/common.js'; \n\n\nexport default {\n\nname: 'TimeChart',\nsetup() {\n  const time = ref([]);\n  const ping = ref([]);\n  const chartCanvas = ref();\n \n\n  const getData = async () => {\n    try {\n      const response = await axios.get(\"/get/chartData\");\n      time.value = response.data.map(item => new Date(item.time).getTime());\n      ping.value = response.data.map(item => item.ping);\n      console.log(response);\n    //  console.log(typeof time.value[0]);\n      drawChart(chartCanvas.value.getContext('2d'),time.value,ping.value);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // const drawChart = () => {\n  //   const ctx = chartCanvas.value.getContext('2d');\n  //   new Chart(ctx, {\n  //     type: 'line',\n  //     data: {\n  //       labels: time.value,\n  //       datasets: [{\n  //         label: 'ping',\n  //         data: ping.value,\n  //         borderColor: 'rgb(75, 192, 192)',\n  //         borderWidth: 1,\n  //         fill: false,\n  //         pointRadius : 0\n  //       }]\n  //     },\n  //     options: {    \n  //       scales: {\n  //         x: {\n  //           type: 'time',\n  //           time: {\n  //             unit: 'day',\n  //             displayFormats: {\n  //               day: 'MM/dd'\n  //             }\n  //           }\n  //         },\n  //         y: {\n  //           min: 0,\n  //           max: 60000\n  //         }\n  //       }\n  //     }\n  //   });\n  // };\n  \n  onMounted(getData);\n\n  return { chartCanvas };\n}\n};\n</script>\n\n<style scoped>\n/* Add your chart styles here */\n</style>\n"],"mappings":"AAOA;AACA,OAAO,0BAA0B;AACjC,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,qBAAqB;AAG/C,eAAe;EAEfC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIN,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMO,IAAG,GAAIP,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMQ,WAAU,GAAIR,GAAG,CAAC,CAAC;IAGzB,MAAMS,OAAM,GAAI,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,gBAAgB,CAAC;QAClDL,IAAI,CAACM,KAAI,GAAIF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAACC,IAAG,IAAK,IAAIC,IAAI,CAACD,IAAI,CAACT,IAAI,CAAC,CAACW,OAAO,CAAC,CAAC,CAAC;QACrEV,IAAI,CAACK,KAAI,GAAIF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACR,IAAI,CAAC;QACjDW,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;QACvB;QACEP,SAAS,CAACK,WAAW,CAACI,KAAK,CAACQ,UAAU,CAAC,IAAI,CAAC,EAACd,IAAI,CAACM,KAAK,EAACL,IAAI,CAACK,KAAK,CAAC;MACrE,EAAE,OAAOS,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEApB,SAAS,CAACQ,OAAO,CAAC;IAElB,OAAO;MAAED;IAAY,CAAC;EACxB;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}