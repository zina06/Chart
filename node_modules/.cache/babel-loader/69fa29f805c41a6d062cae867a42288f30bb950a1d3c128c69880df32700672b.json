{"ast":null,"code":"import 'chartjs-adapter-date-fns';\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { drawChart } from '../../common/common.js';\nexport default {\n  name: 'TimeChart',\n  setup() {\n    const time = ref([]);\n    const ping = ref([]);\n    const chartCanvas = ref();\n    const startDate = ref(new Date());\n    const endDate = ref(new Date());\n    const formattedDate = ref();\n    const selectedDate = ref();\n    const formatStartDate = ref();\n    const formatDate = dateTime => {\n      const date = new Date(dateTime);\n      const year = date.getFullYear();\n      const month = ('0' + (date.getMonth() + 1)).slice(-2);\n      const day = ('0' + date.getDate()).slice(-2);\n      formattedDate.value = `${year}-${month}-${day}`;\n      console.log(formattedDate.value); // 출력: \"2024-05-16\"\n    };\n    const handleStartDateChange = date => {\n      const clickStartDate = date.target.value;\n      console.log(\"Selected Date: \" + clickStartDate);\n    };\n    const handleEndDateChange = date => {\n      const clickEndDate = date.target.value;\n      console.log(\"오늘날짜 클릭: \" + clickEndDate);\n    };\n    const getData = async () => {\n      console.log(\"getData\");\n      console.log(\"startDate value\" + startDate.value);\n      try {\n        const response = await axios.get(`/get/chartData?startDate=${startDate.value}&endDate=${endDate.value}`);\n        time.value = response.data.map(item => new Date(item.time).getTime());\n        ping.value = response.data.map(item => item.ping);\n        console.log(response);\n        drawChart(chartCanvas.value.getContext('2d'), time.value, ping.value);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    onMounted(getData);\n    return {\n      chartCanvas,\n      startDate,\n      endDate,\n      handleStartDateChange,\n      handleEndDateChange,\n      formatDate,\n      selectedDate,\n      formatStartDate\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","drawChart","name","setup","time","ping","chartCanvas","startDate","Date","endDate","formattedDate","selectedDate","formatStartDate","formatDate","dateTime","date","year","getFullYear","month","getMonth","slice","day","getDate","value","console","log","handleStartDateChange","clickStartDate","target","handleEndDateChange","clickEndDate","getData","response","get","data","map","item","getTime","getContext","error"],"sources":["C:\\test\\test\\test\\src\\components\\Chart\\Chart.vue"],"sourcesContent":["<template>\r\n\r\n     <div style=\"display: flex; justify-content: center;\">\r\n    <div style=\"margin: 10px;\"><Datepicker \r\n        v-model=\"startDate\"\r\n        @focus=\"handleStartDateChange\"\r\n        />       \r\n    </div>\r\n    <span style=\"margin: 10px;\">~</span>\r\n    <div  style=\"margin: 10px;\"><Datepicker      \r\n        v-model=\"endDate\"     \r\n        @focus=\"handleEndDateChange\"   \r\n         />\r\n    </div>\r\n    <div>\r\n    <Datepicker v-model=\"selectedDate\" @focus=\"handleEndDateChange\" />\r\n  </div>\r\n    <button @click=\"getData\">조회</button>\r\n  </div>\r\n\r\n\r\n\r\n    <div>\r\n      <canvas ref=\"chartCanvas\" id=\"canvas\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import 'chartjs-adapter-date-fns';\r\n  import { ref, onMounted } from 'vue';\r\n  import axios from 'axios';\r\n  import { drawChart } from '../../common/common.js'; \r\n\r\n  \r\n  export default {\r\n  \r\n  name: 'TimeChart',\r\n  setup() {\r\n    const time = ref([]);\r\n    const ping = ref([]);\r\n    const chartCanvas = ref();\r\n    const startDate = ref(new Date());\r\n    const endDate = ref(new Date());\r\n    const formattedDate = ref();\r\n    const selectedDate = ref();\r\n    const formatStartDate = ref();\r\n\r\n\r\n\r\n   const formatDate = (dateTime) => {\r\n    const date = new Date(dateTime);\r\n    const year = date.getFullYear();\r\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\r\n    const day = ('0' + date.getDate()).slice(-2);\r\n     formattedDate.value = `${year}-${month}-${day}`;\r\n\r\n    console.log(formattedDate.value); // 출력: \"2024-05-16\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleStartDateChange = (date) => {\r\n     const clickStartDate = date.target.value;\r\n  \r\n\r\n     console.log(\"Selected Date: \" + clickStartDate);\r\n  \r\n    };\r\n\r\n    const handleEndDateChange = (date) => {\r\n      const clickEndDate = date.target.value;\r\n      \r\n      console.log(\"오늘날짜 클릭: \" + clickEndDate );\r\n    };\r\n  \r\n    const getData = async () => {\r\n      console.log(\"getData\");\r\n      console.log(\"startDate value\"+startDate.value);\r\n   \r\n      try {\r\n        const response = await axios.get(`/get/chartData?startDate=${startDate.value}&endDate=${endDate.value}`);\r\n\r\n        time.value = response.data.map(item => new Date(item.time).getTime());\r\n        ping.value = response.data.map(item => item.ping);\r\n        console.log(response);\r\n        drawChart(chartCanvas.value.getContext('2d'),time.value,ping.value);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n    \r\n    onMounted(getData);\r\n\r\n   \r\n  \r\n    return { chartCanvas,startDate ,endDate,handleStartDateChange,handleEndDateChange, formatDate,\r\n      selectedDate, formatStartDate ,\r\n    };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #canvas {\r\n    width: 800px; \r\n    height: 400px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}