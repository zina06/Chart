{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport 'chartjs-adapter-date-fns';\nimport { ref, onMounted, onBeforeUnmount, nextTick } from 'vue';\nimport axios from 'axios';\nimport { drawChart } from '../../common/common.js';\nimport moment from 'moment';\nexport default {\n  name: 'TimeChart',\n  setup() {\n    /*  const date = new Date();\r\n      const time = ref([]);\r\n      const ping = ref([]);\r\n      const chartCanvas = ref();\r\n      const startDate = ref(new Date(date.getFullYear(), date.getMonth(), 1));\r\n      const endDate = ref(new Date());\r\n      const selectedDate = ref();\r\n      const formatStartDate = ref();\r\n      const isLoading = ref(true);\r\n      const serverName = ref();\r\n      const chartCanvasRefs = ref([]);\r\n      const charts = ref([]);\r\n     \r\n     \r\n        const handleStartDateChange = (date) => {\r\n       const clickStartDate = date.target.value;\r\n         if(clickStartDate==null){\r\n          return;\r\n        }\r\n          let Year = clickStartDate.substring(0,4);\r\n        let Month = clickStartDate.substring(5,7);\r\n        let Day = clickStartDate.substring(8,10);\r\n     \r\n     \r\n        const newDate =  new Date(Number(Year), Number(Month)-1, Number(Day));     \r\n        startDate.value = newDate;\r\n      \r\n      };\r\n        const handleEndDateChange = (date) => {\r\n        const clickEndDate = date.target.value;\r\n        let Year = clickEndDate.substring(0,4);\r\n        let Month = clickEndDate.substring(5,7);\r\n        let Day = clickEndDate.substring(8,10);\r\n          const newDate =  new Date(Number(Year), Number(Month)-1, Number(Day));\r\n        endDate.value = newDate;\r\n        \r\n      \r\n      };\r\n    \r\n      const getData = async () => {\r\n          const formattedStartDate = moment(startDate.value).format('YYYY-MM-DD');\r\n        const formattedEndDate = moment(endDate.value).format('YYYY-MM-DD');\r\n          if(formattedStartDate <= formattedEndDate) {\r\n          isLoading.value = true;\r\n            try {\r\n              const response = await axios.get(`/get/chartData`, {\r\n                    params: {\r\n                      startDate: formattedStartDate,\r\n                        endDate: formattedEndDate,\r\n                      }\r\n                    });\r\n                      \r\n                  time.value = response.data.map(item => new Date(item.time).getTime());          \r\n                  ping.value = response.data.map(item => item.ping);\r\n                  serverName.value = response.data.map(item => item.serverName);\r\n    \r\n                    charts.value = Array.from({ length: 20 }, () => ({\r\n                      time: [...time.value],\r\n                      ping: [...ping.value],\r\n                      serverName : [...serverName.value]\r\n                    }));\r\n                 \r\n                 \r\n                 await nextTick();\r\n                 await drawChartsInGroups(3);\r\n                // charts.value.forEach((chart, index) => {\r\n                //         const canvas = chartCanvasRefs.value[index];\r\n                //     if (canvas) {\r\n                //       const context = canvas.getContext('2d');\r\n                //         drawChart(context, chart.time, chart.ping);\r\n                //     }\r\n                // });\r\n                 \r\n                  for (let index = 0; index < charts.value.length; index++) {\r\n                  const chart = charts.value[index];\r\n                  const canvas = chartCanvasRefs.value[index];\r\n                  console.log(canvas);\r\n                  if (canvas) {\r\n                    const context = canvas.getContext('2d');\r\n                   \r\n                  await drawChartAsync(context, chart.time, chart.ping, true);\r\n                \r\n              }           \r\n            }                \r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n        } else {\r\n            alert(\"시작날짜는 끝날짜보다 작아야 합니다.\")\r\n        }\r\n      };\r\n        const drawChartAsync = (context, time, ping ) => {\r\n        \r\n        return new Promise((resolve) => {\r\n          requestAnimationFrame(() => {\r\n            drawChart(context, time, ping);\r\n            resolve();        \r\n          });\r\n        });\r\n      };\r\n        \r\n      const drawChartsInGroups = async (groupSize) => {\r\n        for (let i = 0; i < charts.value.length; i += groupSize) {\r\n          isLoading.value = true;\r\n          const groupPromises = [];\r\n          for (let j = 0; j < groupSize && (i + j) < charts.value.length; j++) {\r\n            const index = i + j;\r\n            const chart = charts.value[index];\r\n            const canvas = chartCanvasRefs.value[index];\r\n            if (canvas) {\r\n              const context = canvas.getContext('2d');\r\n              groupPromises.push(drawChartAsync(context, chart.time, chart.ping));\r\n            }\r\n          }\r\n          await Promise.all(groupPromises);\r\n          isLoading.value = false;\r\n          await new Promise(resolve => setTimeout(resolve, 100)); // 잠시 대기\r\n        }\r\n        //isLoading.value = false;\r\n      };\r\n        //onMounted(getData);\r\n      const handleVisibilityChange = async () => {\r\n        if (!document.hidden) {\r\n          await reloadCharts();\r\n        }\r\n      };\r\n        const reloadCharts = async () => {\r\n        await nextTick();\r\n        await drawChartsInGroups(3);\r\n      };\r\n        onMounted(async () => {\r\n        await getData();\r\n        document.addEventListener('visibilitychange', handleVisibilityChange);\r\n      });\r\n        onBeforeUnmount(() => {\r\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      });\r\n      \r\n      return { chartCanvas,\r\n                startDate,\r\n                endDate,\r\n                handleStartDateChange,\r\n                handleEndDateChange,\r\n                selectedDate,\r\n                formatStartDate, \r\n                getData, \r\n                isLoading,\r\n                chartCanvasRefs,\r\n                charts\r\n          };*/\n    const date = new Date();\n    const startDate = ref(new Date(date.getFullYear(), date.getMonth(), 1));\n    const endDate = ref(new Date());\n    const isLoading = ref(false);\n    const chartCanvasRefs = ref([]);\n    const charts = ref([]);\n    const handleDateChange = (event, dateRef) => {\n      const dateString = event.target.value;\n      if (!dateString) return;\n      const [year, month, day] = dateString.split('-').map(Number);\n      dateRef.value = new Date(year, month - 1, day);\n    };\n    const handleStartDateChange = event => handleDateChange(event, startDate);\n    const handleEndDateChange = event => handleDateChange(event, endDate);\n    const getData = async () => {\n      const formattedStartDate = moment(startDate.value).format('YYYY-MM-DD');\n      const formattedEndDate = moment(endDate.value).format('YYYY-MM-DD');\n      if (formattedStartDate > formattedEndDate) {\n        alert(\"시작날짜는 끝날짜보다 작아야 합니다.\");\n        return;\n      }\n      isLoading.value = true;\n      try {\n        const response = await axios.get('/get/chartData', {\n          params: {\n            startDate: formattedStartDate,\n            endDate: formattedEndDate\n          }\n        });\n        const data = response.data;\n        const time = data.map(item => new Date(item.time).getTime());\n        const ping = data.map(item => item.ping);\n        const serverName = data.map(item => item.serverName);\n        charts.value = Array.from({\n          length: 3\n        }, () => ({\n          time: [...time],\n          ping: [...ping],\n          serverName: serverName[0] // Assuming all server names are the same for simplification\n        }));\n        await nextTick();\n        await drawChartsInGroups(3);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const drawChartAsync = (context, time, ping) => {\n      return new Promise(resolve => {\n        requestAnimationFrame(() => {\n          drawChart(context, time, ping);\n          resolve();\n        });\n      });\n    };\n    const drawChartsInGroups = async groupSize => {\n      for (let i = 0; i < charts.value.length; i += groupSize) {\n        const groupPromises = [];\n        for (let j = 0; j < groupSize && i + j < charts.value.length; j++) {\n          const index = i + j;\n          const chart = charts.value[index];\n          const canvas = chartCanvasRefs.value[index];\n          if (canvas) {\n            const context = canvas.getContext('2d');\n            groupPromises.push(drawChartAsync(context, chart.time, chart.ping));\n          }\n        }\n        await Promise.all(groupPromises);\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    };\n    const handleVisibilityChange = async () => {\n      if (!document.hidden) {\n        await nextTick();\n        await drawChartsInGroups(3);\n      }\n    };\n    onMounted(() => {\n      getData();\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n    });\n    onBeforeUnmount(() => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    });\n    return {\n      startDate,\n      endDate,\n      handleStartDateChange,\n      handleEndDateChange,\n      getData,\n      isLoading,\n      chartCanvasRefs,\n      charts\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","nextTick","axios","drawChart","moment","name","setup","date","Date","startDate","getFullYear","getMonth","endDate","isLoading","chartCanvasRefs","charts","handleDateChange","event","dateRef","dateString","target","value","year","month","day","split","map","Number","handleStartDateChange","handleEndDateChange","getData","formattedStartDate","format","formattedEndDate","alert","response","get","params","data","time","item","getTime","ping","serverName","Array","from","length","drawChartsInGroups","error","console","drawChartAsync","context","Promise","resolve","requestAnimationFrame","groupSize","i","groupPromises","j","index","chart","canvas","getContext","push","all","setTimeout","handleVisibilityChange","document","hidden","addEventListener","removeEventListener"],"sources":["C:\\test\\test\\test\\src\\components\\Chart\\Chart.vue"],"sourcesContent":["<template>\r\n  <div class=\"center\">\r\n    <img alt=\"Vue logo\" src=\"@/assets/metanet.png\" style=\"width: 200px;\">\r\n  </div>\r\n     <div style=\"display: flex; justify-content: center;\">\r\n      <div style=\"margin: 10px;\"><Datepicker \r\n          v-model=\"startDate\"\r\n          @focus=\"handleStartDateChange\"\r\n          />       \r\n      </div>\r\n      <span style=\"margin: 10px;\">~</span>\r\n      <div style=\"margin: 10px;\"><Datepicker      \r\n          v-model=\"endDate\"     \r\n          @focus=\"handleEndDateChange\"   \r\n          />\r\n      </div>\r\n     <div>\r\n\r\n      \r\n     \r\n    </div>\r\n       <button @click=\"getData\" class=\"btn btn-info btn-sm\">조회</button>\r\n    </div>\r\n\r\n  <div class=\"spinner-div\" v-if=\"isLoading\">\r\n      <q-spinner-tail\r\n      color=\"primary\"\r\n      size=\"5em\"\r\n      />\r\n  </div>\r\n\r\n \r\n\r\n  <br>\r\n  <!-- <div>   \r\n    <canvas ref=\"chartCanvas\" id=\"canvas\">    \r\n    </canvas>\r\n  </div> -->\r\n  <div v-for=\"(chart, index) in charts\" :key=\"index\" style=\"height: 400px; margin-bottom:100px; margin-left: 20px; margin-right: 20px;\">\r\n    <label style=\"margin-top: 35px; margin-bottom: 10px;\"><b>서버 이름 {{  }}</b></label>\r\n    <canvas :ref=\"el => chartCanvasRefs[index] = el\" :id=\"'canvas' + index\"></canvas>\r\n  </div>\r\n\r\n\r\n  </template>\r\n  \r\n  <script>\r\n  import 'chartjs-adapter-date-fns';\r\n  import { ref, onMounted, onBeforeUnmount, nextTick  } from 'vue';\r\n  import axios from 'axios';\r\n  import { drawChart } from '../../common/common.js'; \r\n  import moment from 'moment';\r\n\r\n\r\n  \r\n  export default {\r\n  \r\n  name: 'TimeChart',\r\n  setup() {\r\n  /*  const date = new Date();\r\n    const time = ref([]);\r\n    const ping = ref([]);\r\n    const chartCanvas = ref();\r\n    const startDate = ref(new Date(date.getFullYear(), date.getMonth(), 1));\r\n    const endDate = ref(new Date());\r\n    const selectedDate = ref();\r\n    const formatStartDate = ref();\r\n    const isLoading = ref(true);\r\n    const serverName = ref();\r\n    const chartCanvasRefs = ref([]);\r\n    const charts = ref([]);\r\n   \r\n   \r\n\r\n    const handleStartDateChange = (date) => {\r\n     const clickStartDate = date.target.value;\r\n\r\n     if(clickStartDate==null){\r\n        return;\r\n      }\r\n\r\n      let Year = clickStartDate.substring(0,4);\r\n      let Month = clickStartDate.substring(5,7);\r\n      let Day = clickStartDate.substring(8,10);\r\n   \r\n   \r\n      const newDate =  new Date(Number(Year), Number(Month)-1, Number(Day));     \r\n      startDate.value = newDate;\r\n    \r\n    };\r\n\r\n    const handleEndDateChange = (date) => {\r\n      const clickEndDate = date.target.value;\r\n      let Year = clickEndDate.substring(0,4);\r\n      let Month = clickEndDate.substring(5,7);\r\n      let Day = clickEndDate.substring(8,10);\r\n\r\n      const newDate =  new Date(Number(Year), Number(Month)-1, Number(Day));\r\n      endDate.value = newDate;\r\n      \r\n    \r\n    };\r\n  \r\n    const getData = async () => {\r\n\r\n      const formattedStartDate = moment(startDate.value).format('YYYY-MM-DD');\r\n      const formattedEndDate = moment(endDate.value).format('YYYY-MM-DD');\r\n\r\n      if(formattedStartDate <= formattedEndDate) {\r\n        isLoading.value = true;\r\n          try {\r\n            const response = await axios.get(`/get/chartData`, {\r\n                  params: {\r\n                    startDate: formattedStartDate,\r\n                      endDate: formattedEndDate,\r\n                    }\r\n                  });\r\n\r\n                  \r\n                time.value = response.data.map(item => new Date(item.time).getTime());          \r\n                ping.value = response.data.map(item => item.ping);\r\n                serverName.value = response.data.map(item => item.serverName);\r\n\r\n\r\n\r\n                charts.value = Array.from({ length: 20 }, () => ({\r\n                    time: [...time.value],\r\n                    ping: [...ping.value],\r\n                    serverName : [...serverName.value]\r\n                  }));\r\n               \r\n               \r\n               await nextTick();\r\n               await drawChartsInGroups(3);\r\n              // charts.value.forEach((chart, index) => {\r\n              //         const canvas = chartCanvasRefs.value[index];\r\n              //     if (canvas) {\r\n              //       const context = canvas.getContext('2d');\r\n              //         drawChart(context, chart.time, chart.ping);\r\n              //     }\r\n              // });\r\n\r\n             \r\n\r\n              for (let index = 0; index < charts.value.length; index++) {\r\n                const chart = charts.value[index];\r\n                const canvas = chartCanvasRefs.value[index];\r\n                console.log(canvas);\r\n                if (canvas) {\r\n                  const context = canvas.getContext('2d');\r\n                 \r\n                await drawChartAsync(context, chart.time, chart.ping, true);\r\n              \r\n            }           \r\n          }                \r\n        } catch (error) {\r\n          console.error('Error fetching data:', error);\r\n        }\r\n      } else {\r\n          alert(\"시작날짜는 끝날짜보다 작아야 합니다.\")\r\n      }\r\n    };\r\n\r\n    const drawChartAsync = (context, time, ping ) => {\r\n      \r\n      return new Promise((resolve) => {\r\n        requestAnimationFrame(() => {\r\n          drawChart(context, time, ping);\r\n          resolve();        \r\n        });\r\n      });\r\n    };\r\n\r\n    \r\n    const drawChartsInGroups = async (groupSize) => {\r\n      for (let i = 0; i < charts.value.length; i += groupSize) {\r\n        isLoading.value = true;\r\n        const groupPromises = [];\r\n        for (let j = 0; j < groupSize && (i + j) < charts.value.length; j++) {\r\n          const index = i + j;\r\n          const chart = charts.value[index];\r\n          const canvas = chartCanvasRefs.value[index];\r\n          if (canvas) {\r\n            const context = canvas.getContext('2d');\r\n            groupPromises.push(drawChartAsync(context, chart.time, chart.ping));\r\n          }\r\n        }\r\n        await Promise.all(groupPromises);\r\n        isLoading.value = false;\r\n        await new Promise(resolve => setTimeout(resolve, 100)); // 잠시 대기\r\n      }\r\n      //isLoading.value = false;\r\n    };\r\n\r\n    //onMounted(getData);\r\n    const handleVisibilityChange = async () => {\r\n      if (!document.hidden) {\r\n        await reloadCharts();\r\n      }\r\n    };\r\n\r\n    const reloadCharts = async () => {\r\n      await nextTick();\r\n      await drawChartsInGroups(3);\r\n    };\r\n\r\n    onMounted(async () => {\r\n      await getData();\r\n      document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    });\r\n\r\n  \r\n    return { chartCanvas,\r\n              startDate,\r\n              endDate,\r\n              handleStartDateChange,\r\n              handleEndDateChange,\r\n              selectedDate,\r\n              formatStartDate, \r\n              getData, \r\n              isLoading,\r\n              chartCanvasRefs,\r\n              charts\r\n        };*/\r\n    const date = new Date();\r\n    const startDate = ref(new Date(date.getFullYear(), date.getMonth(), 1));\r\n    const endDate = ref(new Date());\r\n    const isLoading = ref(false);\r\n    const chartCanvasRefs = ref([]);\r\n    const charts = ref([]);\r\n\r\n        const handleDateChange = (event, dateRef) => {\r\n      const dateString = event.target.value;\r\n      if (!dateString) return;\r\n\r\n      const [year, month, day] = dateString.split('-').map(Number);\r\n      dateRef.value = new Date(year, month - 1, day);\r\n    };\r\n\r\n    const handleStartDateChange = event => handleDateChange(event, startDate);\r\n    const handleEndDateChange = event => handleDateChange(event, endDate);\r\n\r\n    const getData = async () => {\r\n      const formattedStartDate = moment(startDate.value).format('YYYY-MM-DD');\r\n      const formattedEndDate = moment(endDate.value).format('YYYY-MM-DD');\r\n\r\n      if (formattedStartDate > formattedEndDate) {\r\n        alert(\"시작날짜는 끝날짜보다 작아야 합니다.\");\r\n        return;\r\n      }\r\n\r\n      isLoading.value = true;\r\n\r\n      try {\r\n        const response = await axios.get('/get/chartData', {\r\n          params: {\r\n            startDate: formattedStartDate,\r\n            endDate: formattedEndDate,\r\n          },\r\n        });\r\n\r\n        const data = response.data;\r\n        const time = data.map(item => new Date(item.time).getTime());\r\n        const ping = data.map(item => item.ping);\r\n        const serverName = data.map(item => item.serverName);\r\n\r\n        charts.value = Array.from({ length: 3 }, () => ({\r\n          time: [...time],\r\n          ping: [...ping],\r\n          serverName: serverName[0], // Assuming all server names are the same for simplification\r\n        }));\r\n\r\n        await nextTick();\r\n        await drawChartsInGroups(3);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    };\r\n\r\n    const drawChartAsync = (context, time, ping) => {\r\n      return new Promise(resolve => {\r\n        requestAnimationFrame(() => {\r\n          drawChart(context, time, ping);\r\n          resolve();\r\n        });\r\n      });\r\n    };\r\n\r\n    const drawChartsInGroups = async groupSize => {\r\n      for (let i = 0; i < charts.value.length; i += groupSize) {\r\n        const groupPromises = [];\r\n        for (let j = 0; j < groupSize && (i + j) < charts.value.length; j++) {\r\n          const index = i + j;\r\n          const chart = charts.value[index];\r\n          const canvas = chartCanvasRefs.value[index];\r\n          if (canvas) {\r\n            const context = canvas.getContext('2d');\r\n            groupPromises.push(drawChartAsync(context, chart.time, chart.ping));\r\n          }\r\n        }\r\n        await Promise.all(groupPromises);\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n      }\r\n    };\r\n\r\n    const handleVisibilityChange = async () => {\r\n      if (!document.hidden) {\r\n        await nextTick();\r\n        await drawChartsInGroups(3);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getData();\r\n      document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    });\r\n    return {\r\n      startDate,\r\n      endDate,\r\n      handleStartDateChange,\r\n      handleEndDateChange,\r\n      getData,\r\n      isLoading,\r\n      chartCanvasRefs,\r\n      charts,\r\n    };\r\n\r\n\r\n\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #canvas {\r\n    width: 800px; \r\n    height: 400px;\r\n  }\r\n\r\n\r\n  .spinner-div {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(255, 255, 255, 0.8); \r\n  z-index: 9999; \r\n}\r\n\r\n\r\nbutton {\r\n  height: 35px; \r\n  margin-top: 5px; \r\n  width: 50px; \r\n  margin-left: 10px; \r\n  color: white;\r\n\r\n}\r\n\r\n\r\n.center {\r\n            text-align: center; /* 가로 가운데 정렬 */\r\n        }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}